// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      Role     @default(USER)
  ratings   Rating[]
  movies    Movie[]  @relation("MovieCreatedBy")
  series    Series[] @relation("SeriesCreatedBy")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Movie {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String
  length      Int
  createdBy   User     @relation(name: "MovieCreatedBy", fields: [createdById], references: [id])
  createdById Int
  movieActors MovieActor[]
  movieGenres MovieGenre[]
  ratings     Rating[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Series {
  id            Int        @id @default(autoincrement())
  title         String     @unique
  description   String
  numOfSeasons  Int
  numOfEpisodes Int
  createdBy     User       @relation(name: "SeriesCreatedBy", fields: [createdById], references: [id])
  createdById   Int
  seriesActors  SeriesActor[]
  seriesGenres  SeriesGenre[]
  ratings       Rating[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Actor {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  movieActors   MovieActor[]     
  seriesActors  SeriesActor[]   
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Genre {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  movieGenres   MovieGenre[]     
  seriesGenres  SeriesGenre[]  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Rating {
  id          Int      @id @default(autoincrement())
  score       Int
  movie       Movie?   @relation(fields: [movieId], references: [id])
  movieId     Int?
  series      Series?  @relation(fields: [seriesId], references: [id])
  seriesId    Int?
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MovieActor {
  movieId Int
  actorId Int
  movie Movie                  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  actor Actor                  @relation(fields: [actorId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@id([movieId, actorId])
}

model SeriesActor {
  seriesId Int
  actorId  Int
  series Series                @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  actor Actor                  @relation(fields: [actorId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@id([seriesId, actorId])
}

model MovieGenre {
  movieId Int
  genreId Int
  movie Movie                  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  genre Genre                  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@id([movieId, genreId])
}

model SeriesGenre {
  seriesId Int
  genreId  Int
  series Series                @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  genre Genre                  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@id([seriesId, genreId])
}
